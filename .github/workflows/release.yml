name: Release
on:
  push:
    tags:
      - 'v*'
env:
  DOKS: k8s-1-18-3-do-0-tor1-1595030703060
  DO_REGISTRY_BASE: registry.digitalocean.com
  DO_REGISTRY_REPOSITORY: repository
  DH_REGISTRY_BASE: docker.io
  DH_REGISTRY_REPOSITORY: blakerandall
  GITHUB_REGISTRY_BASE: docker.pkg.github.com
  GITHUB_REGISTRY_REPOSITORY: ${{ github.repository }}
  IMAGE_NAME: jekyll
  HOSTNAME: 'randall.family'
  CERTIFICATE: 'randall-family-wildcard-tls-prod'
jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Docker Image
        run: |
          docker build --compress -f Dockerfile --no-cache --pull --quiet --rm --force-rm -t $IMAGE_NAME .
  deploy:
    name: deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Digital Ocean CLI
        uses: digitalocean/action-doctl@v2.0.0
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: docker build --compress -f Dockerfile --no-cache --pull --quiet --rm --force-rm -t $IMAGE_NAME .
      - name: Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login $GITHUB_REGISTRY_BASE -u ${{ github.actor }} --password-stdin
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login  -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login $DO_REGISTRY_BASE -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN}} --password-stdin
      - name: Publish
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "master" ] && VERSION=latest
          GITHUB_IMAGE=$(echo $GITHUB_REGISTRY_BASE/$GITHUB_REGISTRY_REPOSITORY | tr '[A-Z]' '[a-z]')/$IMAGE_NAME:$VERSION
          docker tag $IMAGE_NAME $GITHUB_IMAGE
          docker push $GITHUB_IMAGE
          DH_IMAGE=$(echo $DH_REGISTRY_BASE/$DH_REGISTRY_REPOSITORY | tr '[A-Z]' '[a-z]')/$IMAGE_NAME:$VERSION
          docker tag $IMAGE_NAME $DH_IMAGE
          docker push $DH_IMAGE
          DO_IMAGE=$(echo $DO_REGISTRY_BASE/$DO_REGISTRY_REPOSITORY | tr '[A-Z]' '[a-z]')/$IMAGE_NAME:$VERSION
          docker tag $IMAGE_NAME $DO_IMAGE
          docker push $DO_IMAGE
      - name: Configure Kubernetes YAML
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "master" ] && VERSION=latest
          DO_IMAGE=$(echo $DO_REGISTRY_BASE/$DO_REGISTRY_REPOSITORY | tr '[A-Z]' '[a-z]')/$IMAGE_NAME:$VERSION
          sed -i 's|'${DO_REGISTRY_BASE}'/'${DO_REGISTRY_REPOSITORY}'/jekyll-version|'${DO_IMAGE}'|g' ${{ github.workspace }}/kubernetes.yml
          sed -i 's|jekyll-version|'${VERSION}'|g' ${{ github.workspace }}/kubernetes.yml
          sed -i 's/jekyll-env/jekyll-prod/g' ${{ github.workspace }}/kubernetes.yml
          sed -i 's/jekyll-host/'$HOSTNAME'/g' ${{ github.workspace }}/kubernetes.yml
          sed -i 's/jekyll-cert/'$CERTIFICATE'/g' ${{ github.workspace }}/kubernetes.yml
      - name: Download Kubernetes Configuration from Digital Ocean
        run: doctl kubernetes cluster kubeconfig save $DOKS
      - name: Deploy to Digital Ocean Kubernetes Cluster
        run: kubectl apply -f ${{ github.workspace }}/kubernetes.yml
      - name: Verify Deploy to Digital Ocean Kubernetes Cluster
        run: kubectl rollout status deployment/jekyll-prod
      - name: GitHub - Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
